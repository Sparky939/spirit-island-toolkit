{"version":3,"sources":["components/MainMenu.tsx","components/ScreenManager.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["styles","StyleSheet","create","Button","backgroundColor","border","color","padding","textAlign","textDecoration","display","fontSize","MainMenu","props","className","css","onClick","navigateTo","ScreenManager","React","useState","screen","setScreen","destination","getContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAGMA,EAASC,IAAWC,OAAO,CAC/BC,OAAQ,CACNC,gBAAiB,UACjBC,OAAQ,OACRC,MAAO,QACPC,QAAS,YACTC,UAAW,SACXC,eAAgB,OAChBC,QAAS,eACTC,SAAU,UA2BCC,MAnBf,SAAkBC,GAChB,OACE,gCACE,qBACEC,UAAWC,YAAIf,EAAOG,QACtBa,QAAS,kBAAMH,EAAMI,WAAW,sBAFlC,+BAMA,qBACEH,UAAWC,YAAIf,EAAOG,QACtBa,QAAS,kBAAMH,EAAMI,WAAW,qBAFlC,4BCgBSC,MApCf,SAAuBL,GACrB,MAA4BM,IAAMC,SAAoBP,EAAMQ,QAA5D,mBAAOA,EAAP,KAAeC,EAAf,KAEA,SAASL,EAAWM,GAClBD,EAAUC,GA6BZ,OA1BA,WACE,OAAQF,GACN,IAAK,YACH,OAAO,cAAC,EAAD,CAAUJ,WAAYA,IAE/B,IAAK,oBACH,OACE,8BACE,wBAAQD,QAAS,kBAAMC,EAAW,qBAAlC,+BAMN,IAAK,mBACH,OACE,8BACE,wBAAQD,QAAS,kBAAMC,EAAW,cAAlC,gCASHO,ICpCMC,MAJf,WACE,OAAO,cAAC,EAAD,CAAeJ,OAAQ,eCWjBK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.df51c03a.chunk.js","sourcesContent":["import { ScreenKey } from \"./ScreenManager\";\r\nimport { css, StyleSheet } from \"aphrodite\";\r\n\r\nconst styles = StyleSheet.create({\r\n  Button: {\r\n    backgroundColor: \"#4CAF50\",\r\n    border: \"none\",\r\n    color: \"white\",\r\n    padding: \"15px 32px\",\r\n    textAlign: \"center\",\r\n    textDecoration: \"none\",\r\n    display: \"inline-block\",\r\n    fontSize: \"16px\",\r\n  },\r\n});\r\n\r\ninterface MainMenuProps {\r\n  navigateTo: (dest: ScreenKey) => void;\r\n}\r\n\r\nfunction MainMenu(props: MainMenuProps) {\r\n  return (\r\n    <div>\r\n      <div\r\n        className={css(styles.Button)}\r\n        onClick={() => props.navigateTo(\"CHARACTER_LIBRARY\")}\r\n      >\r\n        Character Library\r\n      </div>\r\n      <div\r\n        className={css(styles.Button)}\r\n        onClick={() => props.navigateTo(\"RESOURCE_LIBRARY\")}\r\n      >\r\n        References\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainMenu;\r\n","import React from \"react\";\r\nimport MainMenu from \"./MainMenu\";\r\n\r\nexport type ScreenKey = \"MAIN_MENU\" | \"RESOURCE_LIBRARY\" | \"CHARACTER_LIBRARY\";\r\n\r\ninterface ScreenProps {\r\n  screen: ScreenKey;\r\n}\r\n\r\nfunction ScreenManager(props: ScreenProps) {\r\n  const [screen, setScreen] = React.useState<ScreenKey>(props.screen);\r\n\r\n  function navigateTo(destination: ScreenKey) {\r\n    setScreen(destination);\r\n  }\r\n\r\n  function getContent() {\r\n    switch (screen) {\r\n      case \"MAIN_MENU\": {\r\n        return <MainMenu navigateTo={navigateTo} />;\r\n      }\r\n      case \"CHARACTER_LIBRARY\": {\r\n        return (\r\n          <div>\r\n            <button onClick={() => navigateTo(\"RESOURCE_LIBRARY\")}>\r\n              Go to Resources\r\n            </button>\r\n          </div>\r\n        );\r\n      }\r\n      case \"RESOURCE_LIBRARY\": {\r\n        return (\r\n          <div>\r\n            <button onClick={() => navigateTo(\"MAIN_MENU\")}>\r\n              Go to Main Menu\r\n            </button>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  return getContent();\r\n}\r\n\r\nexport default ScreenManager;\r\n","import ScreenManager from \"./components/ScreenManager\";\r\n\r\nfunction App() {\r\n  return <ScreenManager screen={\"MAIN_MENU\"} />;\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}